Parameters:
  Prefix:
    Type: String
    Description: "Prefix for naming resources"
    Default: "my"  # You can set a default value or leave it empty for users to specify

Resources:
  # KMS Key for encrypting SecureString parameters
  # MyKMSKey:
  #   Type: AWS::KMS::Key
  #   Properties:
  #     Description: "KMS key for encrypting secure parameters in Parameter Store"
  #     EnableKeyRotation: true
  #     KeyPolicy:
  #       Version: "2012-10-17"
  #       Statement:
  #         # Allow root account full access to the KMS key
  #         - Effect: Allow
  #           Principal:
  #             AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
  #           Action: "kms:*"
  #           Resource: "*"
  #         # Allow SSM service to use the KMS key for parameter encryption and decryption
  #         - Effect: Allow
  #           Principal:
  #             Service: ssm.amazonaws.com
  #           Action:
  #             - "kms:Decrypt"
  #             - "kms:GenerateDataKey"
  #           Resource: "*"

 # IAM User for Programmatic Access
  ECRUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Sub "${Prefix}-ECRProgrammaticUser"
      Policies:
        - PolicyName: "ECRAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                  - ecr:PutImage
                  - ecr:CompleteLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:InitiateLayerUpload
                  - ecr:ListImages
                  - ecr:DescribeImages
                Resource: "*"
        - PolicyName: "ECSAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecs:*
                Resource: "*"
        - PolicyName: "S3AccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource: "*"
        - PolicyName: "SQSAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: "*"
        - PolicyName: "SSMParameterStoreAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource: "*"
        - PolicyName: "PassRolePolicy"  # New policy for PassRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "iam:PassRole"
                Resource: 
                  - arn:aws:iam::120569624059:role/t1-ECSTaskExecutionRole
                  - arn:aws:iam::120569624059:role/t1-ECSTaskRole

        # - PolicyName: "KMSAccessPolicy"
        #   PolicyDocument:
        #     Version: "2012-10-17"
        #     Statement:
        #       # Allow the user to manage KMS keys (create, describe, and other KMS actions)
        #       - Effect: Allow
        #         Action:
        #           - kms:CreateKey
        #           - kms:DescribeKey
        #           - kms:EnableKey
        #           - kms:DisableKey
        #           - kms:ScheduleKeyDeletion
        #           - kms:CancelKeyDeletion
        #           - kms:ListAliases
        #           - kms:ListKeys
        #           - kms:PutKeyPolicy
        #           - kms:UpdateKeyDescription
        #         Resource: "*"  # Allows the user to create and manage any KMS key
        #       # Allow the user to use specific KMS key actions on the MyKMSKey only
        #       - Effect: Allow
        #         Action:
        #           - kms:Encrypt
        #           - kms:Decrypt
        #           - kms:ReEncrypt*
        #           - kms:GenerateDataKey*
        #           - kms:DescribeKey
        #         Resource: !GetAtt MyKMSKey.Arn  # Grants these actions only on the specified KMS key
                
  # Access Key for the IAM User
  ECRUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref ECRUser
    DependsOn: ECRUser  # Ensure ECRUser is created first

  # # Store AccessKeyId and SecretAccessKey in Parameter Store
  # AccessKeyIdParameter:
  #   Type: AWS::SSM::Parameter
  #   Properties:
  #     Name: !Sub "/${Prefix}/ECRUser/AccessKeyId"
  #     Type: String
  #     Value: !Ref ECRUserAccessKey
  #   DependsOn: ECRUserAccessKey  # Ensure access key is created first

  # SecretAccessKeyParameter:
  #   Type: AWS::SSM::Parameter
  #   Properties:
  #     Name: !Sub "/${Prefix}/ECRUser/SecretAccessKey"
  #     Type: String # SecureString should be
  #     Value: !GetAtt ECRUserAccessKey.SecretAccessKey
  #     KeyId: !Ref MyKMSKey
  #   DependsOn: ECRUserAccessKey  # Ensure access key is created first

Outputs:
  AccessKeyId:
    Description: "Access Key ID for programmatic access"
    Value: !Ref ECRUserAccessKey
    Export:
      Name: !Sub "${Prefix}-ECRUserAccessKeyId"

  SecretAccessKey:
    Description: "Secret Access Key for programmatic access"
    Value: !GetAtt ECRUserAccessKey.SecretAccessKey
    Export:
      Name: !Sub "${Prefix}-ECRUserSecretAccessKey"

