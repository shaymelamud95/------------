Parameters:
  Prefix:
    Type: String
    Description: "Prefix for naming resources"
    Default: "my"  # You can set a default value or leave it empty for users to specify

Resources:
 # IAM User for Programmatic Access
  ECRUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Sub "${Prefix}-ECRProgrammaticUser"
      Policies:
        - PolicyName: "ECRAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                  - ecr:PutImage
                  - ecr:CompleteLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:InitiateLayerUpload
                  - ecr:ListImages
                  - ecr:DescribeImages
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                  - ecr:PutImage
                  - ecs:RegisterTaskDefinition
                  - ecs:UpdateService
                  - ecs:DescribeTaskDefinition
                  - iam:PassRole 
                Resource: "*"
        - PolicyName: "ECSAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecs:*
                Resource: "*"
        - PolicyName: "S3AccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource: "*"
        - PolicyName: "SQSAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: "*"
        - PolicyName: "SSMParameterStoreAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource: "*"
        - PolicyName: "PassRolePolicy"  # New policy for PassRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "iam:PassRole"
                Resource: 
                  - arn:aws:iam::120569624059:role/t1-ECSTaskExecutionRole
                  - arn:aws:iam::120569624059:role/t1-ECSTaskRole
        - PolicyName: "CloudFormationAccessPolicy"  # New policy for CloudFormation access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:ListExports
                Resource: "*"


  # Access Key for the IAM User
  ECRUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref ECRUser
    DependsOn: ECRUser  # Ensure ECRUser is created first

  # Store AccessKeyId in SSM Parameter Store
  AccessKeyIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${Prefix}/ECRUser/AccessKeyId"
      Type: "String"
      Value: !Ref ECRUserAccessKey
      Description: "Access Key ID for ECRUser programmatic access"
    DependsOn: ECRUserAccessKey  # Ensure access key is created first

  # Store SecretAccessKey in SSM Parameter Store
  SecretAccessKeyParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${Prefix}/ECRUser/SecretAccessKey"
      Type: "String"  # Use SecureString to keep it encrypted
      Value: !GetAtt ECRUserAccessKey.SecretAccessKey
      Description: "Secret Access Key for ECRUser programmatic access"
    DependsOn: ECRUserAccessKey  # Ensure access key is created first

Outputs:
  AccessKeyId:
    Description: "Access Key ID for programmatic access"
    Value: !Ref ECRUserAccessKey
    Export:
      Name: !Sub "${Prefix}-ECRUserAccessKeyId"

  SecretAccessKey:
    Description: "Secret Access Key for programmatic access"
    Value: !GetAtt ECRUserAccessKey.SecretAccessKey
    Export:
      Name: !Sub "${Prefix}-ECRUserSecretAccessKey"

